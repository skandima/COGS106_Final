import numpy as np

class Metropolis:
    def __init__(self, logTarget, initialState):
        self.logTarget = logTarget
        self.state = initialState
        self.samples = [initialState]

    #function that determines whether or not to accept a proposal state
    def __accept__(self, proposal):
        logProposal = self.logTarget(proposal) - self.logTarget(self.state)
        acceptanceProb = min(1, np.exp(logProposal))
        if np.random.rand() < acceptanceProb: 
            self.state = proposal
            self.samples.append(proposal)
            return True
        else: 
            self.samples.append(self.state)
            return False
        
    #adapts the proposal distribution based on the acceptance rate of the Markov chain
    def adapt(self, blockLengths):
        nBlocks = len(blockLengths)
        currentBlock = 0
        currentRate = 0.0
        self.mu = 0.0
        self.sigma = 1.0
        while currentBlock < nBlocks:
            acceptances = 0
            proposals = 0
            for i in range(blockLengths[currentBlock]):
                proposal = self.state + np.random.normal(self.mu, self.sigma)
                if self.__accept__(proposal):
                    acceptances += 1
                proposals += 1
            acceptanceRate = acceptances / proposals
            self.mu = self.mu * ((acceptanceRate / 0.4) ** 1.1)
            currentRate = (currentRate * currentBlock + acceptanceRate) / (currentBlock + 1)
            currentBlock += 1
        return self
    
    #generates samples from the Markov chain
    def sample(self, nSamples):
        for i in range(nSamples):
            proposal = np.random.normal(self.mu, self.sigma) + self.state
            self.__accept__(proposal)
        return self
    
    #summary of the samples generated by the Markov chain
    def summary(self):
        mean = np.mean(self.samples)
        sd = np.std(self.samples)
        ci025, ci975 = np.percentile(self.samples, [2.5, 97.5])
        return {'mean': mean, 'sd': sd, 'c025': ci025, 'c975': ci975}